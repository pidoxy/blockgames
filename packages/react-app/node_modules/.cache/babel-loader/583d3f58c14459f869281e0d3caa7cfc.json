{"ast":null,"code":"import { useRef, useEffect, useCallback } from 'react';\nvar DEBUG = false;\n/**\r\n * @see useOnRepetition for a newer implementation\r\n * helper hook to call a function regularly at time intervals when the block changes.\r\n * @param provider ethers/web3 provider\r\n * @param callbackFn any function\r\n * @param args function parameters\r\n */\n\nexport var useOnBlock = function useOnBlock(provider, callbackFn) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  // save the input function provided\n  var savedCallback = useRef();\n  useEffect(function () {\n    savedCallback.current = callbackFn;\n  }, [callbackFn]); // Turn on the listener if we have a function & a provider\n\n  var listener = useCallback(function (blockNumber) {\n    if (provider) {\n      if (DEBUG) console.log(blockNumber, callbackFn, args, provider.listeners());\n\n      if (savedCallback.current) {\n        if (args && args.length > 0) {\n          savedCallback.current.apply(savedCallback, args);\n        } else {\n          savedCallback.current();\n        }\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(function () {\n    if (provider) {\n      provider.on('block', listener);\n      return function () {\n        provider.off('block', listener);\n      };\n    } else {\n      return function () {\n        /* cleanup */\n      };\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [provider]);\n};","map":{"version":3,"sources":["/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/eth-hooks/useOnBlock.js"],"names":["useRef","useEffect","useCallback","DEBUG","useOnBlock","provider","callbackFn","args","savedCallback","current","listener","blockNumber","console","log","listeners","length","on","off"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,WAA5B,QAA+C,OAA/C;AACA,IAAMC,KAAK,GAAG,KAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAWC,UAAX,EAAmC;AAAA,oCAATC,IAAS;AAATA,IAAAA,IAAS;AAAA;;AACzD;AACA,MAAMC,aAAa,GAAGR,MAAM,EAA5B;AACAC,EAAAA,SAAS,CAAC,YAAM;AACZO,IAAAA,aAAa,CAACC,OAAd,GAAwBH,UAAxB;AACH,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT,CAHyD,CAMzD;;AACA,MAAMI,QAAQ,GAAGR,WAAW,CAAC,UAACS,WAAD,EAAiB;AAC1C,QAAIN,QAAJ,EAAc;AACV,UAAIF,KAAJ,EACIS,OAAO,CAACC,GAAR,CAAYF,WAAZ,EAAyBL,UAAzB,EAAqCC,IAArC,EAA2CF,QAAQ,CAACS,SAAT,EAA3C;;AACJ,UAAIN,aAAa,CAACC,OAAlB,EAA2B;AACvB,YAAIF,IAAI,IAAIA,IAAI,CAACQ,MAAL,GAAc,CAA1B,EAA6B;AACzBP,UAAAA,aAAa,CAACC,OAAd,OAAAD,aAAa,EAAYD,IAAZ,CAAb;AACH,SAFD,MAGK;AACDC,UAAAA,aAAa,CAACC,OAAd;AACH;AACJ;AACJ,KAZyC,CAa1C;;AACH,GAd2B,EAczB,EAdyB,CAA5B;AAeAR,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAII,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACW,EAAT,CAAY,OAAZ,EAAqBN,QAArB;AACA,aAAO,YAAM;AACTL,QAAAA,QAAQ,CAACY,GAAT,CAAa,OAAb,EAAsBP,QAAtB;AACH,OAFD;AAGH,KALD,MAMK;AACD,aAAO,YAAM;AACT;AACH,OAFD;AAGH,KAXW,CAYZ;;AACH,GAbQ,EAaN,CAACL,QAAD,CAbM,CAAT;AAcH,CApCM","sourcesContent":["import { useRef, useEffect, useCallback } from 'react';\r\nconst DEBUG = false;\r\n/**\r\n * @see useOnRepetition for a newer implementation\r\n * helper hook to call a function regularly at time intervals when the block changes.\r\n * @param provider ethers/web3 provider\r\n * @param callbackFn any function\r\n * @param args function parameters\r\n */\r\nexport const useOnBlock = (provider, callbackFn, ...args) => {\r\n    // save the input function provided\r\n    const savedCallback = useRef();\r\n    useEffect(() => {\r\n        savedCallback.current = callbackFn;\r\n    }, [callbackFn]);\r\n    // Turn on the listener if we have a function & a provider\r\n    const listener = useCallback((blockNumber) => {\r\n        if (provider) {\r\n            if (DEBUG)\r\n                console.log(blockNumber, callbackFn, args, provider.listeners());\r\n            if (savedCallback.current) {\r\n                if (args && args.length > 0) {\r\n                    savedCallback.current(...args);\r\n                }\r\n                else {\r\n                    savedCallback.current();\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    useEffect(() => {\r\n        if (provider) {\r\n            provider.on('block', listener);\r\n            return () => {\r\n                provider.off('block', listener);\r\n            };\r\n        }\r\n        else {\r\n            return () => {\r\n                /* cleanup */\r\n            };\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [provider]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}