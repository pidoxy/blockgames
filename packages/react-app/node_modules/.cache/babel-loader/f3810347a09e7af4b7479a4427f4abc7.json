{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { parseProviderOrSigner } from \"./functions\";\n/**\r\n * Get the address from the current signer or provider\r\n * @param providerOrSigner (TEthersProviderOrSigner)\r\n * @returns (string) :: address\r\n */\n\nexport var useUserAddress = function useUserAddress(providerOrSigner) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userAddress = _useState2[0],\n      setUserAddress = _useState2[1];\n\n  useEffect(function () {\n    var getUserAddress = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(providerOrSigner) {\n        var _a, result, address;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return parseProviderOrSigner(providerOrSigner);\n\n              case 2:\n                result = _context.sent;\n\n                if (!result.signer) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 6;\n                return (_a = result.signer) === null || _a === void 0 ? void 0 : _a.getAddress();\n\n              case 6:\n                address = _context.sent;\n                setUserAddress(address);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getUserAddress(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (providerOrSigner) void getUserAddress(providerOrSigner);\n  }, [providerOrSigner]);\n  return userAddress;\n};","map":{"version":3,"sources":["/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/eth-hooks/useUserAddress.js"],"names":["useState","useEffect","parseProviderOrSigner","useUserAddress","providerOrSigner","userAddress","setUserAddress","getUserAddress","result","signer","_a","getAddress","address"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,qBAAT,QAAsC,aAAtC;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,gBAAD,EAAsB;AAChD,kBAAsCJ,QAAQ,CAAC,EAAD,CAA9C;AAAA;AAAA,MAAOK,WAAP;AAAA,MAAoBC,cAApB;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMM,cAAc;AAAA,0EAAG,iBAAOH,gBAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEEF,qBAAqB,CAACE,gBAAD,CAFvB;;AAAA;AAEbI,gBAAAA,MAFa;;AAAA,qBAGfA,MAAM,CAACC,MAHQ;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAIQ,CAACC,EAAE,GAAGF,MAAM,CAACC,MAAb,MAAyB,IAAzB,IAAiCC,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACC,UAAH,EAJlE;;AAAA;AAITC,gBAAAA,OAJS;AAKfN,gBAAAA,cAAc,CAACM,OAAD,CAAd;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAdL,cAAc;AAAA;AAAA;AAAA,OAApB;;AAQA,QAAIH,gBAAJ,EACI,KAAKG,cAAc,CAACH,gBAAD,CAAnB;AACP,GAXQ,EAWN,CAACA,gBAAD,CAXM,CAAT;AAYA,SAAOC,WAAP;AACH,CAfM","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { parseProviderOrSigner } from \"./functions\";\r\n/**\r\n * Get the address from the current signer or provider\r\n * @param providerOrSigner (TEthersProviderOrSigner)\r\n * @returns (string) :: address\r\n */\r\nexport const useUserAddress = (providerOrSigner) => {\r\n    const [userAddress, setUserAddress] = useState('');\r\n    useEffect(() => {\r\n        const getUserAddress = async (providerOrSigner) => {\r\n            var _a;\r\n            const result = await parseProviderOrSigner(providerOrSigner);\r\n            if (result.signer) {\r\n                const address = await ((_a = result.signer) === null || _a === void 0 ? void 0 : _a.getAddress());\r\n                setUserAddress(address);\r\n            }\r\n        };\r\n        if (providerOrSigner)\r\n            void getUserAddress(providerOrSigner);\r\n    }, [providerOrSigner]);\r\n    return userAddress;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}