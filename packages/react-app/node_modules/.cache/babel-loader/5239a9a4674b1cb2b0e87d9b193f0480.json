{"ast":null,"code":"import _regeneratorRuntime from\"/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{SendOutlined}from\"@ant-design/icons\";import{Button,Input,Tooltip}from\"antd\";import{useLookupAddress}from\"eth-hooks/dapps/ens\";import React,{useCallback,useEffect,useState}from\"react\";import Blockies from\"react-blockies\";import{Transactor}from\"../helpers\";import Wallet from\"./Wallet\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var _require=require(\"ethers\"),utils=_require.utils;// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/export default function Faucet(props){var _useState=useState(),_useState2=_slicedToArray(_useState,2),address=_useState2[0],setAddress=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),faucetAddress=_useState4[0],setFaucetAddress=_useState4[1];useEffect(function(){var getFaucetAddress=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _faucetAddress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!props.localProvider){_context.next=5;break;}_context.next=3;return props.localProvider.listAccounts();case 3:_faucetAddress=_context.sent;setFaucetAddress(_faucetAddress[0]);//console.log(_faucetAddress);\ncase 5:case\"end\":return _context.stop();}}},_callee);}));return function getFaucetAddress(){return _ref.apply(this,arguments);};}();getFaucetAddress();},[props.localProvider]);var blockie;if(address&&typeof address.toLowerCase===\"function\"){blockie=/*#__PURE__*/_jsx(Blockies,{seed:address.toLowerCase(),size:8,scale:4});}else{blockie=/*#__PURE__*/_jsx(\"div\",{});}var ens=useLookupAddress(props.ensProvider,address);var updateAddress=useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newValue){var _address,possibleAddress;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(typeof newValue!==\"undefined\")){_context2.next=13;break;}_address=newValue;if(!(_address.indexOf(\".eth\")>0||_address.indexOf(\".xyz\")>0)){_context2.next=12;break;}_context2.prev=3;_context2.next=6;return props.ensProvider.resolveName(_address);case 6:possibleAddress=_context2.sent;if(possibleAddress){_address=possibleAddress;}// eslint-disable-next-line no-empty\n_context2.next=12;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](3);case 12:setAddress(_address);case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[3,10]]);}));return function(_x){return _ref2.apply(this,arguments);};}(),[props.ensProvider,props.onChange]);var tx=Transactor(props.localProvider);return/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(Input,{size:\"large\",placeholder:props.placeholder?props.placeholder:\"local faucet\",prefix:blockie// value={address}\n,value:ens||address,onChange:function onChange(e){// setAddress(e.target.value);\nupdateAddress(e.target.value);},suffix:/*#__PURE__*/_jsxs(Tooltip,{title:\"Faucet: Send local ether to an address.\",children:[/*#__PURE__*/_jsx(Button,{onClick:function onClick(){tx({to:address,value:utils.parseEther(\"0.01\")});setAddress(\"\");},shape:\"circle\",icon:/*#__PURE__*/_jsx(SendOutlined,{})}),/*#__PURE__*/_jsx(Wallet,{color:\"#888888\",provider:props.localProvider,ensProvider:props.ensProvider,price:props.price,address:faucetAddress})]})})});}","map":{"version":3,"sources":["/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/packages/react-app/src/components/Faucet.jsx"],"names":["SendOutlined","Button","Input","Tooltip","useLookupAddress","React","useCallback","useEffect","useState","Blockies","Transactor","Wallet","require","utils","Faucet","props","address","setAddress","faucetAddress","setFaucetAddress","getFaucetAddress","localProvider","listAccounts","_faucetAddress","blockie","toLowerCase","ens","ensProvider","updateAddress","newValue","indexOf","resolveName","possibleAddress","onChange","tx","placeholder","e","target","value","to","parseEther","price"],"mappings":"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","sourcesContent":["import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        //console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}