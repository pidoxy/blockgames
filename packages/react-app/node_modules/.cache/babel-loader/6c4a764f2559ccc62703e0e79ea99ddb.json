{"ast":null,"code":"import _slicedToArray from \"/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { constants } from 'ethers';\nimport { useState, useEffect } from 'react';\n/**\r\n * Gets the address from an ENS name and provider\r\n * @param provider (TEthersProvider)\r\n * @param ensName (string)\r\n * @returns (string) :: address\r\n */\n\nexport var useResolveEnsName = function useResolveEnsName(provider, ensName) {\n  var _useState = useState(constants.AddressZero),\n      _useState2 = _slicedToArray(_useState, 2),\n      address = _useState2[0],\n      setAddress = _useState2[1];\n\n  useEffect(function () {\n    if (provider) {\n      void provider.resolveName(ensName).then(function (resolvedAddress) {\n        return setAddress(resolvedAddress);\n      });\n    }\n  }, [provider, ensName]);\n  return address;\n};","map":{"version":3,"sources":["/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/eth-hooks/dapps/ens/useResolveEnsName.js"],"names":["constants","useState","useEffect","useResolveEnsName","provider","ensName","AddressZero","address","setAddress","resolveName","then","resolvedAddress"],"mappings":";AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAWC,OAAX,EAAuB;AACpD,kBAA8BJ,QAAQ,CAACD,SAAS,CAACM,WAAX,CAAtC;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIE,QAAJ,EAAc;AACV,WAAKA,QAAQ,CAACK,WAAT,CAAqBJ,OAArB,EAA8BK,IAA9B,CAAmC,UAACC,eAAD;AAAA,eAAqBH,UAAU,CAACG,eAAD,CAA/B;AAAA,OAAnC,CAAL;AACH;AACJ,GAJQ,EAIN,CAACP,QAAD,EAAWC,OAAX,CAJM,CAAT;AAKA,SAAOE,OAAP;AACH,CARM","sourcesContent":["import { constants } from 'ethers';\r\nimport { useState, useEffect } from 'react';\r\n/**\r\n * Gets the address from an ENS name and provider\r\n * @param provider (TEthersProvider)\r\n * @param ensName (string)\r\n * @returns (string) :: address\r\n */\r\nexport const useResolveEnsName = (provider, ensName) => {\r\n    const [address, setAddress] = useState(constants.AddressZero);\r\n    useEffect(() => {\r\n        if (provider) {\r\n            void provider.resolveName(ensName).then((resolvedAddress) => setAddress(resolvedAddress));\r\n        }\r\n    }, [provider, ensName]);\r\n    return address;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}