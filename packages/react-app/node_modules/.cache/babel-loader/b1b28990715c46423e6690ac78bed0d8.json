{"ast":null,"code":"import { useEffect, useRef } from 'react';\n/**\r\n * @see useOnRepetition for a newer implementation\r\n * helper hook to call a function regularly in time intervals\r\n * @param callbackFn\r\n * @param delay\r\n * @param extraWatch\r\n */\n\nexport var usePoller = function usePoller(callbackFn, delay) {\n  var extraWatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var savedCallback = useRef(); // Remember the latest fn.\n\n  useEffect(function () {\n    savedCallback.current = callbackFn;\n  }, [callbackFn]); // Set up the interval.\n\n  useEffect(function () {\n    var tick = function tick() {\n      if (savedCallback.current) savedCallback.current();\n    };\n\n    if (delay !== null && delay > 0) {\n      var id = setInterval(tick, delay);\n      return function () {\n        return clearInterval(id);\n      };\n    }\n  }, [delay]); // run at start too\n\n  useEffect(function () {\n    if (savedCallback.current && delay > 0) savedCallback.current(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [extraWatch]);\n};","map":{"version":3,"sources":["/Users/pidoxy/bockggames/task-1/challenge-2-token-vendor/node_modules/eth-hooks/usePoller.js"],"names":["useEffect","useRef","usePoller","callbackFn","delay","extraWatch","savedCallback","current","tick","id","setInterval","clearInterval"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAaC,KAAb,EAA2C;AAAA,MAAvBC,UAAuB,uEAAV,KAAU;AAChE,MAAMC,aAAa,GAAGL,MAAM,EAA5B,CADgE,CAEhE;;AACAD,EAAAA,SAAS,CAAC,YAAM;AACZM,IAAAA,aAAa,CAACC,OAAd,GAAwBJ,UAAxB;AACH,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT,CAHgE,CAMhE;;AACAH,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMQ,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,UAAIF,aAAa,CAACC,OAAlB,EACID,aAAa,CAACC,OAAd;AACP,KAHD;;AAIA,QAAIH,KAAK,KAAK,IAAV,IAAkBA,KAAK,GAAG,CAA9B,EAAiC;AAC7B,UAAMK,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOJ,KAAP,CAAtB;AACA,aAAO;AAAA,eAAMO,aAAa,CAACF,EAAD,CAAnB;AAAA,OAAP;AACH;AACJ,GATQ,EASN,CAACL,KAAD,CATM,CAAT,CAPgE,CAiBhE;;AACAJ,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIM,aAAa,CAACC,OAAd,IAAyBH,KAAK,GAAG,CAArC,EACIE,aAAa,CAACC,OAAd,GAFQ,CAGZ;AACH,GAJQ,EAIN,CAACF,UAAD,CAJM,CAAT;AAKH,CAvBM","sourcesContent":["import { useEffect, useRef } from 'react';\r\n/**\r\n * @see useOnRepetition for a newer implementation\r\n * helper hook to call a function regularly in time intervals\r\n * @param callbackFn\r\n * @param delay\r\n * @param extraWatch\r\n */\r\nexport const usePoller = (callbackFn, delay, extraWatch = false) => {\r\n    const savedCallback = useRef();\r\n    // Remember the latest fn.\r\n    useEffect(() => {\r\n        savedCallback.current = callbackFn;\r\n    }, [callbackFn]);\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        const tick = () => {\r\n            if (savedCallback.current)\r\n                savedCallback.current();\r\n        };\r\n        if (delay !== null && delay > 0) {\r\n            const id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n    // run at start too\r\n    useEffect(() => {\r\n        if (savedCallback.current && delay > 0)\r\n            savedCallback.current();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [extraWatch]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}